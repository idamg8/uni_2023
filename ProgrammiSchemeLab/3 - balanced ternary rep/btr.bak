;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname btr) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; BTR-DIGIT-SUM

(define btr-digit-sum      ; val: carattere somma +/-/.
  (lambda (a b c)          ; a, b, c: caratteri +/-/.
    (cond ((char=? a #\+)
           (cond ((char=? b #\+)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                 ((char=? b #\-)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                 ((char=? b #\.)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                  )
           )
          ((char=? a #\-)
           (cond ((char=? b #\+)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                 ((char=? b #\-)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                 ((char=? b #\.)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                  )
           )
          ((char=? a #\.)
           (cond ((char=? b #\+)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                 ((char=? b #\-)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                 ((char=? b #\.)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                  )
           ))
      ))


; BTR-CARRY --------------------------------------------------------------------------------

(define btr-carry      ; val: carattere somma +/-/.
  (lambda (a b c)          ; a, b, c: caratteri +/-/.
    (cond ((char=? a #\+)
           (cond ((char=? b #\+)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                 ((char=? b #\-)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                 ((char=? b #\.)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                  )
           )
          ((char=? a #\-)
           (cond ((char=? b #\+)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                 ((char=? b #\-)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                 ((char=? b #\.)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                  )
           )
          ((char=? a #\.)
           (cond ((char=? b #\+)
                  (cond ((char=? c #\+)
                         #\-)
                        ((char=? c #\-)
                         #\.)
                        ((char=? c #\.)
                         #\+)
                        ))
                 ((char=? b #\-)
                  (cond ((char=? c #\+)
                         #\.)
                        ((char=? c #\-)
                         #\+)
                        ((char=? c #\.)
                         #\-)
                        ))
                 ((char=? b #\.)  ; si può semplificare con c
                  (cond ((char=? c #\+)
                         #\+)
                        ((char=? c #\-)
                         #\-)
                        ((char=? c #\.)
                         #\.)
                        ))
                  )
           ))
      ))

